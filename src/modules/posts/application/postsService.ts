import {    PostInputDataModel, type PostModel,    PostOutputDataModel,    PostQueryModel,    PostsOutputWithPaginationModel,} from "../models/postsModels";import {createDateISO} from "../../../shared/utils/createDateISO";import {postsRepository} from "../repository/postsRepository";import {blogsRepository} from "../../blogs/repository/blogsRepository";export const postsService = {    async findMany(queryParams: PostQueryModel, blogId?: string): Promise<PostsOutputWithPaginationModel> {        const {pageSize, pageNumber} = queryParams;        const {foundPosts, totalPostsCount} = await postsRepository.findMany(queryParams, blogId);        return {            pagesCount: Math.ceil(totalPostsCount / pageSize),            page: pageNumber,            pageSize: pageSize,            totalCount: totalPostsCount,            items: foundPosts,        };    },    async create(data: PostInputDataModel): Promise<PostOutputDataModel | null> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return null;        }        const dateNow = new Date();        const newPost: PostModel = {            title: data.title,            shortDescription: data.shortDescription,            content: data.content,            blogId: data.blogId,            blogName: blog.name,            createdAt: createDateISO(dateNow),        };        return await postsRepository.create(newPost);    },    async findById(id: string): Promise<PostOutputDataModel | null> {        return postsRepository.findById(id);    },    async update(id: string, newData: PostInputDataModel): Promise<boolean> {        return await postsRepository.update(id, newData);    },    async delete(id: string): Promise<boolean> {        return await postsRepository.delete(id);    },};