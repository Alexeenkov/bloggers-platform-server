import type {PostInputDataModel, PostModel, PostOutputDataModel, PostQueryModel} from "../models/postsModels";import {postsCollection} from "../../../mongodb/db";import {blogsRepository} from "../../blogs/repository/blogsRepository";import {ObjectId, WithId} from "mongodb";import {mappingPost} from "../features/mappingPost";export const postsRepository = {    async create(data: PostModel): Promise<PostOutputDataModel | null> {        await postsCollection.insertOne(data);        // @ts-ignore Ругается на отсутствие _id. Его добавляет метод mongodb insertOne()        return mappingPost(data);    },    async findMany(queryParams: PostQueryModel): Promise<{foundPosts: PostOutputDataModel[], totalPostsCount: number}> {        const {            sortBy,            sortDirection,            pageSize,            pageNumber,        } = queryParams;        const skip: number = (pageNumber - 1) * pageSize;        const foundPosts = await postsCollection.find({})            .sort({[sortBy]: sortDirection})            .skip(skip)            .limit(pageSize)            .toArray();        const totalPostsCount: number = await postsCollection.countDocuments({});        return {            foundPosts: foundPosts.map((post: WithId<PostModel>) => mappingPost(post)),            totalPostsCount,        };    },    async findById(id: string): Promise<PostOutputDataModel | null> {        const _id: ObjectId = new ObjectId(id);        const foundPost = await postsCollection.findOne({_id});        if (!foundPost) return null;        return mappingPost(foundPost);    },    async update(id: string, data: PostInputDataModel): Promise<boolean> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return false;        }        const _id: ObjectId = new ObjectId(id);        const result = await postsCollection.updateOne({_id}, {$set: {...data, blogName: blog.name}});        return result.matchedCount === 1;    },    async delete(id: string): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await postsCollection.deleteOne({_id});        return result.deletedCount === 1;    },};