import type {PostInputDataModel, PostModel, PostOutputDataModel} from "../models/postsModels";import {postsCollection} from "../../../mongodb/db";import {createDateISO} from "../../../shared/utils/createDateISO";import {blogsRepository} from "../../blogs/repository/blogsRepository";import {ObjectId, WithId} from "mongodb";import {mappingPost} from "../features/mappingPost";export const postsRepository = {    async create(data: PostInputDataModel): Promise<PostOutputDataModel | null> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return null;        }        const dateNow = new Date();        const newPost: WithId<PostModel> = {            _id: new ObjectId(),            title: data.title,            shortDescription: data.shortDescription,            content: data.content,            blogId: data.blogId,            blogName: blog.name,            createdAt: createDateISO(dateNow),        };        await postsCollection.insertOne(newPost);        return mappingPost(newPost);    },    async findAll(): Promise<PostOutputDataModel[]> {        const postsAll = await postsCollection.find({}).toArray();        return postsAll.map(post => mappingPost(post));    },    async findById(id: string): Promise<PostOutputDataModel | null> {        const _id: ObjectId = new ObjectId(id);        const foundPost = await postsCollection.findOne({_id});        if (!foundPost) return null;        return mappingPost(foundPost);    },    async update(id: string, data: PostInputDataModel): Promise<boolean> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return false;        }        const _id: ObjectId = new ObjectId(id);        const result = await postsCollection.updateOne({_id}, {$set: {...data, blogName: blog.name}});        return result.matchedCount === 1;    },    async delete(id: string): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await postsCollection.deleteOne({_id});        return result.deletedCount === 1;    },};