import {PostInputDataModel, PostModel} from "../models/postsModels";import {blogsCollection, postsCollection} from "../../../mongodb/db";import {createDateISO} from "../../../shared/utils/createDateISO";import {blogsRepository} from "../../blogs/repository/blogsRepository";export const postsRepository = {    async create(data: PostInputDataModel): Promise<PostModel | null> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return null;        }        const dateNow = new Date();        const newPost: PostModel = {            id: new Date().getTime().toString(),            title: data.title,            shortDescription: data.shortDescription,            content: data.content,            blogId: data.blogId,            blogName: blog.name,            createdAt: createDateISO(dateNow),        };        await postsCollection.insertOne(newPost);        return newPost;    },    async findAll(): Promise<PostModel[]> {        return postsCollection.find({}, {projection: {_id: 0}}).toArray();    },    async findById(id: PostModel['id']): Promise<PostModel | null> {        return postsCollection.findOne({id});    },    async update(id: PostModel['id'], data: PostInputDataModel): Promise<boolean> {        const blog = await blogsRepository.findBlogName(data.blogId);        if (!blog) {            return false;        }        const result = await postsCollection.updateOne({id}, {$set: {...data, blogName: blog.name}});        return result.matchedCount === 1;    },    async delete(id: PostModel['id']): Promise<boolean> {        const result = await postsCollection.deleteOne({id});        return result.deletedCount === 1;    },};