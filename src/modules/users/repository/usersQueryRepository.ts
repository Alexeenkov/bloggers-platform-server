import {usersCollection} from "../../../mongodb/db";import {Filter, ObjectId, WithId} from "mongodb";import {mappingUser} from "../features/mappingUser";import type {    UserModel,    UserOutputDataModel,    UsersOutputWithPaginationModel,    UsersQueryModel,} from "../models/usersModels";export const usersQueryRepository = {    async findMany(queryParams: UsersQueryModel): Promise<UsersOutputWithPaginationModel> {        const {            sortBy,            sortDirection,            pageSize,            pageNumber,            searchLoginTerm,            searchEmailTerm,        } = queryParams;        const filter: Filter<any> = {};        const skip: number = (pageNumber - 1) * pageSize;        if (searchLoginTerm || searchEmailTerm) {            filter.$or = [                {login: {$regex: searchLoginTerm}},                {email: {$regex: searchEmailTerm}},            ];        }        const foundUsers = await usersCollection.find(filter)            .sort({[sortBy]: sortDirection})            .skip(skip)            .limit(pageSize)            .toArray();        const totalUsersCount: number = await usersCollection.countDocuments(filter);        const mappedUsers: UserOutputDataModel[] = foundUsers.map((user: WithId<UserModel>) => mappingUser(user));        return {            page: pageNumber,            pageSize: pageSize,            pagesCount: Math.ceil(totalUsersCount / pageSize),            totalCount: totalUsersCount,            items: mappedUsers,        };    },    async findById(id: string): Promise<UserOutputDataModel | null> {        const _id: ObjectId = new ObjectId(id);        const foundUser: WithId<UserModel> | null = await usersCollection.findOne({_id});        if (!foundUser) return null;        return mappingUser(foundUser);    },    async findByLoginOrEmail(login: string, email: string): Promise<UserOutputDataModel | null> {         const foundUser = await usersCollection.findOne({            $or: [                {login},                {email},            ],        });         if (!foundUser) {             return null;         }        return mappingUser(foundUser);    },};