openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0

paths:
  /api/blogs:
    get:
      summary: Возвращает список всех блогов
      tags: [ Blogs ]
      responses:
        200:
          description: Список всех блогов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
    post:
      summary: Добавляет новый блог
      tags: [ Blogs ]
      security:
        - BasicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInputData'
      responses:
        201:
          description: Блог был успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          description: Не прошёл валидацию. В схеме запроса описаны требования к передаваемым данным
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: "Не прошёл авторизацию"

  /api/blogs/{id}:
    get:
      summary: Возвращает информацию о блоге по ID
      tags: [ Blogs ]
      parameters:
        - in: path
          name: id
          required: true
          description: "Уникальный идентификатор блога"
          schema:
            type: string
            example: "1OQJ#ri2#E5325rfew"
      responses:
        200:
          description: Всё ок, вернул запрашиваемый блог
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        401:
          description: "Не прошёл авторизацию"
        404:
          description: Такого блога нет по указанному ID
    put:
      summary: Обновляет информацию о блоге по ID
      tags: [ Blogs ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: "Уникальный идентификатор блога"
          schema:
            type: string
            example: "1OQJ#ri2#E5325rfew"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInputData'
      responses:
        204:
          description: Блог успешно обновлён. Ничего не возвращает
        400:
          description: Не прошёл валидацию. В схеме запроса описаны требования к передаваемым данным
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: "Не прошёл авторизацию"
        404:
          description: Такого блога нет по указанному ID
    delete:
      summary: Удаляет блог по ID
      tags: [ Blogs ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: "Уникальный идентификатор блога"
          schema:
            type: string
            example: "1OQJ#ri2#E5325rfew"
      responses:
        204:
          description: "Блог успешно удалён. Ничего не возвращает"
        401:
          description: "Не прошёл авторизацию"
        404:
          description: "Такого блога нет по указанному ID"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Blog:
      type: object
      required:
        - id
        - name
        - description
        - websiteUrl
      properties:
        id:
          type: string
          description: "Уникальный идентификатор"
          example: "QUWr98yrw89ehw98feew89H"
        name:
          type: string
          description: "Полное название блога"
          example: "Как не быть придурком"
        description:
          type: string
          description: "Описание блога"
          example: "Блог о том, как не быть придурком, если вы уже придурок"
        websiteUrl:
          type: string
          description: "Ссылка на сторонний ресурс, которую нужно указать для блога"
          example: "https://example.com"
          pattern: "/^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]*)*$/"
    BlogInputData:
      type: object
      required:
        - name
        - description
        - websiteUrl
      properties:
        name:
          type: string
          maxLength: 15
          description: "Полное название блога"
          example: "Как не быть придурком"
        description:
          type: string
          maxLength: 500
          description: "Описание блога"
          example: "Блог о том, как не быть придурком, если вы уже придурок"
        websiteUrl:
          type: string
          maxLength: 100
          description: "Ссылка на сторонний ресурс, которую нужно указать для блога"
          example: "https://example.com"
          pattern: "/^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]*)*$/"
    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: "name"
        message:
          type: string
          example: "Invalid name"
    ValidationErrorResponse:
      type: object
      properties:
        errorsMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
