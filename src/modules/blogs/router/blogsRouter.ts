import {Router} from "express";import {    createBlogHandler,    createPostForSpecificBlogHandler,    deleteBlogHandler,    getBlogHandler,    getBlogsListHandler,    getPostsListForSpecificBlogHandler,    updateBlogHandler} from "./handlers";import {    idValidationMiddleware,    paginationAndSortingMiddleware,    resultValidationMiddleware} from "../../../shared/middlewares/validation";import {inputBlogDataValidationMiddleware} from "../middlewares/validation/inputBlogDataValidationMiddleware";import {basicAuthGuardMiddleware} from "../../../shared/middlewares/auth/basicAuthGuardMiddleware";import {inputPostDataForSpecBlogValidationMiddleware} from "../middlewares/validation/inputPostDataForSpecBlogValidationMiddleware";export const getBlogsRouter = () => {    const router = Router({});    router.get('/',        paginationAndSortingMiddleware,        resultValidationMiddleware,        getBlogsListHandler,    );    router.post('/',        basicAuthGuardMiddleware,        inputBlogDataValidationMiddleware,        resultValidationMiddleware,        createBlogHandler,    );    router.get('/:id',        idValidationMiddleware,        resultValidationMiddleware,        getBlogHandler,    );    router.get('/:id/posts',        paginationAndSortingMiddleware,        idValidationMiddleware,        resultValidationMiddleware,        getPostsListForSpecificBlogHandler,    );    router.post('/:id/posts',        basicAuthGuardMiddleware,        inputPostDataForSpecBlogValidationMiddleware,        idValidationMiddleware,        paginationAndSortingMiddleware,        resultValidationMiddleware,        createPostForSpecificBlogHandler,    );    router.put('/:id',        basicAuthGuardMiddleware,        idValidationMiddleware,        inputBlogDataValidationMiddleware,        resultValidationMiddleware,        updateBlogHandler,    );    router.delete('/:id',        basicAuthGuardMiddleware,        idValidationMiddleware,        resultValidationMiddleware,        deleteBlogHandler,    );    return router;};