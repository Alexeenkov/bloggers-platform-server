import type {    BlogInputDataModel,    BlogModel,    BlogOutputDataModel,    BlogQueryModel,    BlogsOutputWithPaginationModel} from "../models/blogsModels";import {createDateISO} from "../../../shared/utils/createDateISO";import {blogsRepository} from "../repository/blogsRepository";export const blogsService = {    async findMany(queryParams: BlogQueryModel): Promise<BlogsOutputWithPaginationModel> {        const {pageSize, pageNumber} = queryParams;        const {foundBlogs, totalBlogsCount} = await blogsRepository.findMany(queryParams);        return {            pagesCount: Math.ceil(totalBlogsCount / pageSize),            page: pageNumber,            pageSize: pageSize,            totalCount: totalBlogsCount,            items: foundBlogs,        };    },    async create(data: BlogInputDataModel): Promise<BlogOutputDataModel> {        const dateNow = new Date();        const newBlog: BlogModel = {            name: data.name,            description: data.description,            websiteUrl: data.websiteUrl,            createdAt: createDateISO(dateNow),            isMembership: false,        };        return await blogsRepository.create(newBlog);    },    async findById(id: string): Promise<BlogOutputDataModel | null> {        return blogsRepository.findById(id);    },    async update(id: string, newData: BlogInputDataModel): Promise<boolean> {        return await blogsRepository.update(id, newData);    },    async delete(id: string): Promise<boolean> {        return await blogsRepository.delete(id);    },};