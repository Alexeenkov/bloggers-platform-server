import {BlogInputDataModel, BlogModel, BlogOutputDataModel} from "../models/blogsModels";import {blogsCollection} from "../../../mongodb/db";import {createDateISO} from "../../../shared/utils/createDateISO";import {ObjectId, WithId} from "mongodb";import {mappingBlog} from "../features/mappingBlog";export const blogsRepository = {    async create(data: BlogInputDataModel): Promise<BlogOutputDataModel> {        const dateNow = new Date();        const newBlog: WithId<BlogModel> = {            _id: new ObjectId(),            name: data.name,            description: data.description,            websiteUrl: data.websiteUrl,            createdAt: createDateISO(dateNow),            isMembership: false,        };        await blogsCollection.insertOne(newBlog);        return mappingBlog(newBlog);    },    async findAll(): Promise<BlogOutputDataModel[]> {        const allBlogs = await blogsCollection.find({}).toArray();        return allBlogs.map((blog: WithId<BlogModel>) => mappingBlog(blog));    },    async findById(id: string): Promise<BlogOutputDataModel | null> {        const _id: ObjectId = new ObjectId(id)        const foundBlog: WithId<BlogModel> | null = await blogsCollection.findOne({_id});        if (!foundBlog) return null;        return mappingBlog(foundBlog);    },    async findBlogName(id: string): Promise<{name: string} | null> {        const _id: ObjectId = new ObjectId(id);        return blogsCollection.findOne(            {_id},            {projection: {name: 1, _id: 0}},        );    },    async update(id: string, newData: BlogInputDataModel): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await blogsCollection.updateOne({_id}, {$set: newData});        return result.matchedCount === 1;    },    async delete(id: string): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await blogsCollection.deleteOne({_id});        return result.deletedCount === 1;    },};