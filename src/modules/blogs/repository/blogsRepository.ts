import type {    BlogInputDataModel,    BlogModel,    BlogOutputDataModel,    BlogQueryModel,} from "../models/blogsModels";import {blogsCollection} from "../../../mongodb/db";import {ObjectId, WithId} from "mongodb";import {mappingBlog} from "../features/mappingBlog";export const blogsRepository = {    async findMany(queryParams: BlogQueryModel): Promise<{foundBlogs: BlogOutputDataModel[], totalBlogsCount: number}> {        const {            pageNumber,            pageSize,            sortBy,            sortDirection,            searchNameTerm,        } = queryParams;        const skip: number = (pageNumber - 1) * pageSize;        const filter: any = {};        if (searchNameTerm) {            filter.name = {$regex: searchNameTerm, $options: 'i'};        }        const foundBlogs: WithId<BlogModel>[] = await blogsCollection            .find(filter)            .sort({[sortBy]: sortDirection})            .skip(skip)            .limit(pageSize)            .toArray();        const totalBlogsCount: number = await blogsCollection.countDocuments({});        return {            foundBlogs: foundBlogs.map((blog: WithId<BlogModel>) => mappingBlog(blog)),            totalBlogsCount,        };    },    async create(data: BlogModel): Promise<BlogOutputDataModel> {        await blogsCollection.insertOne(data);        // @ts-ignore Ругается на отсутствие _id. Его добавляет метод mongodb insertOne()        return mappingBlog(data);    },    async findById(id: string): Promise<BlogOutputDataModel | null> {        const _id: ObjectId = new ObjectId(id)        const foundBlog: WithId<BlogModel> | null = await blogsCollection.findOne({_id});        if (!foundBlog) return null;        return mappingBlog(foundBlog);    },    async findBlogName(id: string): Promise<{name: string} | null> {        const _id: ObjectId = new ObjectId(id);        return blogsCollection.findOne(            {_id},            {projection: {name: 1, _id: 0}},        );    },    async update(id: string, newData: BlogInputDataModel): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await blogsCollection.updateOne({_id}, {$set: newData});        return result.matchedCount === 1;    },    async delete(id: string): Promise<boolean> {        const _id: ObjectId = new ObjectId(id);        const result = await blogsCollection.deleteOne({_id});        return result.deletedCount === 1;    },};