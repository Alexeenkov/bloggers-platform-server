import {BlogInputDataModel, BlogModel} from "../models/blogsModels";import {blogsCollection} from "../../../mongodb/db";import {createDateISO} from "../../../shared/utils/createDateISO";export const blogsRepository = {    async create(data: BlogInputDataModel): Promise<BlogModel> {        const dateNow = new Date();        const newBlog: BlogModel = {            id: dateNow.getTime().toString(),            name: data.name,            description: data.description,            websiteUrl: data.websiteUrl,            createdAt: createDateISO(dateNow),            isMembership: false,        };        await blogsCollection.insertOne(newBlog);        return newBlog;    },    async findAll(): Promise<BlogModel[]> {        return blogsCollection.find({}).toArray();    },    async findById(id: BlogModel['id']): Promise<BlogModel | null> {        return blogsCollection.findOne({id});    },    async findBlogName(id: BlogModel['id']): Promise<BlogModel | null> {        return blogsCollection.findOne(            {id},            {projection: {name: 1, _id: 0}},        );    },    async update(id: BlogModel['id'], newData: BlogInputDataModel): Promise<boolean> {        const result = await blogsCollection.updateOne({id}, {$set: newData});        return result.matchedCount === 1;    },    async delete(id: BlogModel['id']): Promise<boolean> {        const result = await blogsCollection.deleteOne({id});        return result.deletedCount === 1;    },};