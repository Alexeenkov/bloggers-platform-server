// @ts-ignoreimport request from 'supertest';import {HTTP_STATUSES, TypeHttpStatus} from "../../src/shared/constants/httpStatuses";import type {PostInputDataModel} from "../../src/modules/posts/models/postsModels";import {generateBasicAuthToken} from "./generateBasicAuthToken";import {Express} from "express";import {POSTS_ROUTER_PATH} from "../../src/shared/constants/routersPaths";const adminToken = generateBasicAuthToken();export const postsTestManager = (app: Express) => {    return {        getAllPosts: async () => {            return await request(app)                .get(POSTS_ROUTER_PATH)                .expect(HTTP_STATUSES.OK);        },        getPostById: async (            id: string,            expectedHttpStatus: TypeHttpStatus,        ) => {            return await request(app)                .get(`${POSTS_ROUTER_PATH}/${id}`)                .expect(expectedHttpStatus);        },        createNewPost: async (            data: PostInputDataModel,            expectedHttpStatus: TypeHttpStatus,        ) => {            return await request(app)                .post(POSTS_ROUTER_PATH)                .set('Authorization', adminToken)                .send(data)                .expect(expectedHttpStatus);        },        updatePost: async (            id: string,            data: PostInputDataModel,            expectedHttpStatus: TypeHttpStatus,        ) => {            return await request(app)                .put(`${POSTS_ROUTER_PATH}/${id}`)                .set('Authorization', adminToken)                .send(data)                .expect(expectedHttpStatus);        },        deletePost: async (id: string) => {            return await request(app)                .delete(`${POSTS_ROUTER_PATH}/${id}`)                .set('Authorization', adminToken)                .expect(HTTP_STATUSES.NO_CONTENT);        },    };};