import request from "supertest";import app from "../../src";import {HTTP_STATUSES, TypeHttpStatus} from "../../src/shared/constants/httpStatuses";import {BLOGS_ROUTER_PATH} from "../../src/modules/blogs/constants";import {BlogInputDataModel, BlogModel} from "../../src/modules/blogs/models/blogsModels";import {generateBasicAuthToken} from "./generateBasicAuthToken";const adminToken = generateBasicAuthToken();export const blogsTestManager = {    getAllBlogs: async () => {        return await request(app)            .get(BLOGS_ROUTER_PATH)            .expect(HTTP_STATUSES.OK);    },    getBlogById: async (        id: BlogModel['id'],        expectedHttpStatus: TypeHttpStatus,    ) => {        return await request(app)            .get(`${BLOGS_ROUTER_PATH}/${id}`)            .expect(expectedHttpStatus);    },    createNewBlog: async (        data: BlogInputDataModel,        expectedHttpStatus: TypeHttpStatus,    ) => {        return await request(app)            .post(BLOGS_ROUTER_PATH)            .set('Authorization', adminToken)            .send(data)            .expect(expectedHttpStatus);    },    updateBlog: async (        id: BlogModel['id'],        data: BlogInputDataModel,        expectedHttpStatus: TypeHttpStatus,    ) => {        return await request(app)            .put(`${BLOGS_ROUTER_PATH}/${id}`)            .set('Authorization', adminToken)            .send(data)            .expect(expectedHttpStatus);    },    deleteBlog: async (id: BlogModel['id']) => {        return await request(app)            .delete(`${BLOGS_ROUTER_PATH}/${id}`)            .set('Authorization', adminToken)            .expect(HTTP_STATUSES.NO_CONTENT);    },}