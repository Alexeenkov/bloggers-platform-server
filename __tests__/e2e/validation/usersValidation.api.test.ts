// @ts-ignoreimport {Express} from "express";import {HTTP_STATUSES} from "../../../src/shared/constants/httpStatuses";import {runAppForTests} from "../../utils/runAppForTests";import {USERS_ROUTER_PATH} from "../../../src/shared/constants/routersPaths";import {usersTestManager} from "../../utils/testManagers/usersTestManager";describe(USERS_ROUTER_PATH, () => {    const app: Express = runAppForTests();    const {createNewUser, getAllUsers} = usersTestManager(app);    it(`❌ Should return ${HTTP_STATUSES.BAD_REQUEST} code and don't create user`, async () => {        const invalidDataSet1 = await createNewUser({            login: 'yo',            email: 'example@test',            password: '12345',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet2 = await createNewUser({            login: 't'.repeat(11),            email: 'example',            password: '1'.repeat(21),        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet3 = await createNewUser({            login: 'chuvak!',            email: 'example@mail.cococo',            password: '        212          ',        }, HTTP_STATUSES.BAD_REQUEST);        expect(invalidDataSet1.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet2.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet3.body.errorsMessages).toHaveLength(3);        const allUsers = await getAllUsers();        expect(allUsers.body).toEqual({            page: 1,            pageSize: 10,            pagesCount: 0,            totalCount: 0,            items: [],        });    });});