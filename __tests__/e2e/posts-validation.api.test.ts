import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {postsTestManager} from "../utils/postsTestManager";import {POSTS_ROUTER_PATH} from "../../src/modules/posts/constants";import {TESTING_ROUTER_PATH} from "../../src/testing/constants/testingRouterPath";import {PostInputDataModel, PostModel} from "../../src/modules/posts/models/postsModels";import {BlogInputDataModel, BlogModel} from "../../src/modules/blogs/models/blogsModels";import {blogsTestManager} from "../utils/blogsTestManager";const getRequest = () => {    return request(app);};describe(POSTS_ROUTER_PATH, () => {    beforeAll(async () => {        await getRequest()            .delete(`${TESTING_ROUTER_PATH}/all-data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    const {createNewBlog} = blogsTestManager;    const {getAllPosts, createNewPost, updatePost} = postsTestManager;    let createdNewBlog: BlogModel;    let createdNewPost: PostModel;    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create BLOG`, async () => {        const correctDataCreateBlog: BlogInputDataModel = {            name: "string",            description: "string string string string string",            websiteUrl: "https://wefwefwef.com"        }        const expectedResponseCreatedBlog: BlogModel = {            id: expect.any(String),            ...correctDataCreateBlog,        }        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);    });    it(`❌ Should return ${HTTP_STATUSES.BAD_REQUEST} code and don't create post`, async () => {        const invalidDataSet1 = await createNewPost({            title: '',            shortDescription: '',            content: '',            blogId: '',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet2 = await createNewPost({            title: '           t               ',            shortDescription: '           t               ',            content: '           t               ',            blogId: '           t               ',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet3 = await createNewPost({            title: 't'.repeat(31),            shortDescription: 't'.repeat(101),            content: 't'.repeat(1001),            blogId: '21478573495345',        }, HTTP_STATUSES.BAD_REQUEST);        // @ts-ignore        const invalidDataSet4 = await createNewPost({}, HTTP_STATUSES.BAD_REQUEST);        expect(invalidDataSet1.body.errorsMessages).toHaveLength(4);        expect(invalidDataSet2.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet3.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet4.body.errorsMessages).toHaveLength(4);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([]);    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create POST`, async () => {        const correctDataCreatePost: PostInputDataModel = {            title: "Заголовок пример",            shortDescription: "Короткое описание. Короткое описание. Короткое описание.",            content: "Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент.",            blogId: createdNewBlog.id,        }        const expectedResponseCreatedPost: PostModel = {            id: expect.any(String),            blogName: createdNewBlog.name,            ...correctDataCreatePost,        }        const createdPostResponse = await createNewPost(correctDataCreatePost, HTTP_STATUSES.CREATED);        createdNewPost = createdPostResponse.body;        expect(createdNewPost).toEqual(expectedResponseCreatedPost);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([expectedResponseCreatedPost]);    });    it(`❌ Should return ${HTTP_STATUSES.BAD_REQUEST} code and don't update post`, async () => {        const invalidDataSet1 = await updatePost(createdNewPost.id, {            title: '',            shortDescription: '',            content: '',            blogId: '',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet2 = await updatePost(createdNewPost.id, {            title: '           t               ',            shortDescription: '           t               ',            content: '           t               ',            blogId: '           t               ',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet3 = await updatePost(createdNewPost.id, {            title: 't'.repeat(31),            shortDescription: 't'.repeat(101),            content: 't'.repeat(1001),            blogId: '21478573495345',        }, HTTP_STATUSES.BAD_REQUEST);        // @ts-ignore        const invalidDataSet4 = await updatePost(createdNewPost.id, {}, HTTP_STATUSES.BAD_REQUEST);        expect(invalidDataSet1.body.errorsMessages).toHaveLength(4);        expect(invalidDataSet2.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet3.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet4.body.errorsMessages).toHaveLength(4);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([createdNewPost]);    });});