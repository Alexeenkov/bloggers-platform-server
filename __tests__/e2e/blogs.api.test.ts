import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {blogsTestManager} from "../utils/blogsTestManager";import {BLOGS_ROUTER_PATH} from "../../src/modules/blogs/constants";import {TESTING_ROUTER_PATH} from "../../src/testing/constants/testingRouterPath";import {BlogModel, BlogWithIdModel} from "../../src/modules/blogs/models/blogsModels";const getRequest = () => {    return request(app);};describe(BLOGS_ROUTER_PATH, () => {    beforeAll(async () => {        await getRequest()            .delete(`${TESTING_ROUTER_PATH}/all-data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    const {getAllBlogs, getBlogById, createNewBlog, updateBlog, deleteBlog} = blogsTestManager;    let createdNewBlog: BlogWithIdModel;    const correctDataCreateBlog: BlogModel = {        name: "string",        description: "string string string string string",        websiteUrl: "https://wefwefwef.com"    }    const expectedResponseCreatedBlog: BlogWithIdModel = {        id: expect.any(String),        ...correctDataCreateBlog,    }    const correctDataUpdateBlog: BlogModel = {        name: "Вася Пупкин",        description: "Прыгает на батуте",        websiteUrl: "https://pryg-skok.ru"    }    const expectedResponseUpdatedBlog: BlogWithIdModel = {        id: expect.any(String),        ...correctDataUpdateBlog,    }    it(`✅ Should return ${HTTP_STATUSES.OK} code and empty array`, async () => {        await getAllBlogs();    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create BLOG`, async () => {        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([expectedResponseCreatedBlog]);    });    it(`✅ Should return ${HTTP_STATUSES.OK} code and blog by id`, async () => {        const getBlogResponse = await getBlogById(createdNewBlog.id, HTTP_STATUSES.OK);        expect(getBlogResponse.body).toEqual(createdNewBlog);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and update blog correctly`, async () => {        await updateBlog(createdNewBlog.id, correctDataUpdateBlog, HTTP_STATUSES.NO_CONTENT)        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([expectedResponseUpdatedBlog]);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and delete blog (return empty array)`, async () => {        await deleteBlog(createdNewBlog.id);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([]);    });});