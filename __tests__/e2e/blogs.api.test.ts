import {Express} from "express";import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {blogsTestManager} from "../utils/testManagers/blogsTestManager";import type {BlogInputDataModel, BlogOutputDataModel} from "../../src/modules/blogs/models/blogsModels";import {REGEXPS} from "../../src/shared/constants/regexps";import {runAppForTests} from "../utils/runAppForTests";import {DEFAULT_PAGE_NUMBER, DEFAULT_PAGE_SIZE} from "../../src/shared/constants/paginationAndSorting";import type {    PostInputDataForBlogModel,    PostOutputDataModel} from "../../src/modules/posts/models/postsModels";import {postsTestManager} from "../utils/testManagers/postsTestManager";import {BLOGS_ROUTER_PATH} from "../../src/shared/constants/routersPaths";describe(BLOGS_ROUTER_PATH, () => {    const app: Express = runAppForTests();    const {        getAllBlogs,        getBlogById,        updateBlog,        deleteBlog,        createNewBlog,        getPostsForBlog,        createNewPostForBlog,    } = blogsTestManager(app);    const {getAllPosts} = postsTestManager(app);    let createdNewBlog: BlogOutputDataModel;    let createdSecondBlog: BlogOutputDataModel;    let createdNewPost: PostOutputDataModel;    let expectedResponseCreatedPost: PostOutputDataModel;    const correctDataCreateBlog: BlogInputDataModel = {        name: "string",        description: "string string string string string",        websiteUrl: "https://wefwefwef.com",    }    const expectedResponseCreatedBlog: BlogOutputDataModel = {        id: expect.any(String),        createdAt: expect.stringMatching(REGEXPS.date_ISO),        isMembership: expect.any(Boolean),        ...correctDataCreateBlog,    }    const correctDataUpdateBlog: BlogInputDataModel = {        name: "Вася Пупкин",        description: "Прыгает на батуте",        websiteUrl: "https://pryg-skok.ru"    }    const expectedResponseUpdatedBlog: BlogOutputDataModel = {        id: expect.any(String),        createdAt: expect.stringMatching(REGEXPS.date_ISO),        isMembership: expect.any(Boolean),        ...correctDataUpdateBlog,    }    const correctDataCreatePost: PostInputDataForBlogModel = {        title: "Заголовок пример",        shortDescription: "Короткое описание. Короткое описание. Короткое описание.",        content: "Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент.",    }    it(`✅ Should return ${HTTP_STATUSES.OK} code and empty array`, async () => {        await getAllBlogs();    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create BLOG`, async () => {        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            pagesCount: 1,            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            totalCount: 1,            items: [expectedResponseCreatedBlog],        });    });    it(`✅ Should return ${HTTP_STATUSES.OK} code and blog by id`, async () => {        const getBlogResponse = await getBlogById(createdNewBlog.id, HTTP_STATUSES.OK);        expect(getBlogResponse.body).toEqual(createdNewBlog);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and update blog correctly`, async () => {        await updateBlog(createdNewBlog.id, correctDataUpdateBlog, HTTP_STATUSES.NO_CONTENT)        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            pagesCount: 1,            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            totalCount: 1,            items: [expectedResponseUpdatedBlog],        });    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create post for new specific blog`, async () => {        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdSecondBlog = createdBlogResponse.body;        expectedResponseCreatedPost = {            id: expect.any(String),            blogName: createdSecondBlog.name,            createdAt: expect.stringMatching(REGEXPS.date_ISO),            blogId: createdSecondBlog.id,            ...correctDataCreatePost,        };        const createdPostResponse = await createNewPostForBlog(createdSecondBlog.id, correctDataCreatePost, HTTP_STATUSES.CREATED);        await createNewPostForBlog(createdSecondBlog.id, correctDataCreatePost, HTTP_STATUSES.CREATED);        createdNewPost = createdPostResponse.body;        expect(createdNewPost).toEqual(expectedResponseCreatedPost);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual({            page: 1,            pageSize: 10,            pagesCount: 1,            totalCount: 2,            items: [expectedResponseCreatedPost, expectedResponseCreatedPost],        });    });    it(`❌ Should return ${HTTP_STATUSES.NOT_FOUND} code for posts endpoints if specific blog not exist`, async () => {        const nonExistentBlogId = "683b4ffff0bba410f89171d9";        await createNewPostForBlog(nonExistentBlogId, correctDataCreatePost, HTTP_STATUSES.NOT_FOUND);        await getPostsForBlog(nonExistentBlogId, HTTP_STATUSES.NOT_FOUND);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual({            page: 1,            pageSize: 10,            pagesCount: 1,            totalCount: 2,            items: [expectedResponseCreatedPost, expectedResponseCreatedPost],        });    });    it(`✅ Should return ${HTTP_STATUSES.OK} code and all posts for new specific blog`, async () => {        await createNewPostForBlog(createdNewBlog.id, correctDataCreatePost, HTTP_STATUSES.CREATED);        const allPostsForBlog = await getPostsForBlog(createdSecondBlog.id, HTTP_STATUSES.OK);        expect(allPostsForBlog.body).toEqual({            page: 1,            pageSize: 10,            pagesCount: 1,            totalCount: 2,            items: [expectedResponseCreatedPost, expectedResponseCreatedPost],        });    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and delete blog (return empty items array)`, async () => {        await deleteBlog(createdNewBlog.id);        await deleteBlog(createdSecondBlog.id);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            pagesCount: 0,            totalCount: 0,            items: [],        });    });});