import {Express} from "express";import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {blogsTestManager} from "../utils/blogsTestManager";import {BLOGS_ROUTER_PATH} from "../../src/modules/blogs/constants";import type {BlogInputDataModel, BlogOutputDataModel} from "../../src/modules/blogs/models/blogsModels";import {REGEXPS} from "../../src/shared/constants/regexps";import {runAppForTests} from "../utils/runAppForTests";import {DEFAULT_PAGE_NUMBER, DEFAULT_PAGE_SIZE} from "../../src/shared/constants/paginationAndSorting";describe(BLOGS_ROUTER_PATH, () => {    const app: Express = runAppForTests();    const {        getAllBlogs,        getBlogById,        updateBlog,        deleteBlog,        createNewBlog,    } = blogsTestManager(app);    let createdNewBlog: BlogOutputDataModel;    const correctDataCreateBlog: BlogInputDataModel = {        name: "string",        description: "string string string string string",        websiteUrl: "https://wefwefwef.com",    }    const expectedResponseCreatedBlog: BlogOutputDataModel = {        id: expect.any(String),        createdAt: expect.stringMatching(REGEXPS.date_ISO),        isMembership: expect.any(Boolean),        ...correctDataCreateBlog,    }    const correctDataUpdateBlog: BlogInputDataModel = {        name: "Вася Пупкин",        description: "Прыгает на батуте",        websiteUrl: "https://pryg-skok.ru"    }    const expectedResponseUpdatedBlog: BlogOutputDataModel = {        id: expect.any(String),        createdAt: expect.stringMatching(REGEXPS.date_ISO),        isMembership: expect.any(Boolean),        ...correctDataUpdateBlog,    }    it(`✅ Should return ${HTTP_STATUSES.OK} code and empty array`, async () => {        await getAllBlogs();    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create BLOG`, async () => {        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            pagesCount: 1,            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            totalCount: 1,            items: [expectedResponseCreatedBlog],        });    });    it(`✅ Should return ${HTTP_STATUSES.OK} code and blog by id`, async () => {        const getBlogResponse = await getBlogById(createdNewBlog.id, HTTP_STATUSES.OK);        expect(getBlogResponse.body).toEqual(createdNewBlog);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and update blog correctly`, async () => {        await updateBlog(createdNewBlog.id, correctDataUpdateBlog, HTTP_STATUSES.NO_CONTENT)        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            pagesCount: 1,            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            totalCount: 1,            items: [expectedResponseUpdatedBlog],        });    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and delete blog (return empty items array)`, async () => {        await deleteBlog(createdNewBlog.id);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual({            pagesCount: 0,            page: DEFAULT_PAGE_NUMBER,            pageSize: DEFAULT_PAGE_SIZE,            totalCount: 0,            items: [],        });    });});