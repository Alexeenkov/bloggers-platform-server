import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {postsTestManager} from "../utils/postsTestManager";import {blogsTestManager} from "../utils/blogsTestManager";import {TESTING_ROUTER_PATH} from "../../src/testing/constants/testingRouterPath";import {POSTS_ROUTER_PATH} from "../../src/modules/posts/constants";import {BlogModel, BlogWithIdModel} from "../../src/modules/blogs/models/blogsModels";import {PostModel, PostWithIdModel} from "../../src/modules/posts/models/postsModels";const getRequest = () => {    return request(app);};describe(POSTS_ROUTER_PATH, () => {    beforeAll(async () => {        await getRequest()            .delete(`${TESTING_ROUTER_PATH}/all-data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    const {createNewBlog} = blogsTestManager;    const {getAllPosts, getPostById, createNewPost, updatePost, deletePost} = postsTestManager;    let createdNewBlog: BlogWithIdModel;    let createdNewPost: PostWithIdModel;    it(`✅ Should return ${HTTP_STATUSES.OK} code and empty array`, async () => {        await getAllPosts();    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create BLOG`, async () => {        const correctDataCreateBlog: BlogModel = {            name: "string",            description: "string string string string string",            websiteUrl: "https://wefwefwef.com"        }        const expectedResponseCreatedBlog: BlogWithIdModel = {            id: expect.any(String),            ...correctDataCreateBlog,        }        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create POST`, async () => {        const correctDataCreatePost: PostModel = {            title: "Заголовок пример",            shortDescription: "Короткое описание. Короткое описание. Короткое описание.",            content: "Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент. Здесь какой-то контент.",            blogId: createdNewBlog.id,        }        const expectedResponseCreatedPost: PostWithIdModel = {            id: expect.any(String),            blogName: createdNewBlog.name,            ...correctDataCreatePost,        }        const createdPostResponse = await createNewPost(correctDataCreatePost, HTTP_STATUSES.CREATED);        createdNewPost = createdPostResponse.body;        expect(createdNewPost).toEqual(expectedResponseCreatedPost);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([expectedResponseCreatedPost]);    });    it(`✅ Should return ${HTTP_STATUSES.OK} code and post by id`, async () => {        const getPostResponse = await getPostById(createdNewPost.id, HTTP_STATUSES.OK);        expect(getPostResponse.body).toEqual(createdNewPost);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and update post correctly`, async () => {        const correctDataUpdatePost: PostModel = {            title: "Заголовок НОВЫЙ",            shortDescription: "Короткое описание НОВОЕ. Короткое описание НОВОЕ. Короткое описание НОВОЕ.",            content: "Здесь какой-то НОВЫЙ контент. Здесь какой-то НОВЫЙ контент. Здесь какой-то НОВЫЙ контент. Здесь какой-то НОВЫЙ контент.",            blogId: createdNewPost.blogId,        }        const expectedResponseUpdatedPost: PostWithIdModel = {            id: expect.any(String),            blogName: createdNewPost.blogName,            ...correctDataUpdatePost,        }        await updatePost(createdNewPost.id, correctDataUpdatePost, HTTP_STATUSES.NO_CONTENT)        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([expectedResponseUpdatedPost]);    });    it(`✅ Should return ${HTTP_STATUSES.NO_CONTENT} code and delete post (return empty array)`, async () => {        await deletePost(createdNewPost.id);        const allPosts = await getAllPosts();        expect(allPosts.body).toEqual([]);    });});