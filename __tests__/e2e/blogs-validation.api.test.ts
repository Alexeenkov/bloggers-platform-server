import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/shared/constants/httpStatuses";import {blogsTestManager} from "../utils/blogsTestManager";import {BLOGS_ROUTER_PATH} from "../../src/modules/blogs/constants";import {TESTING_ROUTER_PATH} from "../../src/testing/constants/testingRouterPath";import {BlogModel, BlogWithIdModel} from "../../src/modules/blogs/models/blogsModels";const getRequest = () => {    return request(app);};describe(BLOGS_ROUTER_PATH, () => {    beforeAll(async () => {        await getRequest()            .delete(`${TESTING_ROUTER_PATH}/all-data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    const {getAllBlogs, createNewBlog, updateBlog} = blogsTestManager;    let createdNewBlog: BlogWithIdModel;    const correctDataCreateBlog: BlogModel = {        name: "string",        description: "string string string string string",        websiteUrl: "https://wefwefwef.com",    }    const expectedResponseCreatedBlog: BlogWithIdModel = {        id: expect.any(String),        ...correctDataCreateBlog,    }    it(`❌ Should return ${HTTP_STATUSES.BAD_REQUEST} code and don't create blog`, async () => {        const invalidDataSet1 = await createNewBlog({            name: '',            description: '',            websiteUrl: '',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet2 = await createNewBlog({            name: '     t    ',            description: '                   t               ',            websiteUrl: '              t                 ',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet3 = await createNewBlog({            ...correctDataCreateBlog,            websiteUrl: 'http://site.com',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet4 = await createNewBlog({            ...correctDataCreateBlog,            websiteUrl: 'https://site.com.',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet5 = await createNewBlog({            ...correctDataCreateBlog,            websiteUrl: 'https://site',        }, HTTP_STATUSES.BAD_REQUEST);        // @ts-ignore        const invalidDataSet6 = await createNewBlog({}, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet7 = await createNewBlog({            name: 't'.repeat(16),            description: 't'.repeat(501),            websiteUrl: 't'.repeat(101),        }, HTTP_STATUSES.BAD_REQUEST);        expect(invalidDataSet1.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet2.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet3.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet4.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet5.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet6.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet7.body.errorsMessages).toHaveLength(3);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([]);    });    it(`✅ Should return ${HTTP_STATUSES.CREATED} code and successfully create blog`, async () => {        const createdBlogResponse = await createNewBlog(correctDataCreateBlog, HTTP_STATUSES.CREATED);        createdNewBlog = createdBlogResponse.body;        expect(createdNewBlog).toEqual(expectedResponseCreatedBlog);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([expectedResponseCreatedBlog]);    });    it(`❌ Should return ${HTTP_STATUSES.BAD_REQUEST} code and don't update blog`, async () => {        const invalidDataSet1 = await updateBlog(createdNewBlog.id, {            name: '',            description: '',            websiteUrl: '',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet2 = await updateBlog(createdNewBlog.id, {            name: '     t    ',            description: '                   t               ',            websiteUrl: '              t                 ',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet3 = await updateBlog(createdNewBlog.id, {            ...correctDataCreateBlog,            websiteUrl: 'http://site.com',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet4 = await updateBlog(createdNewBlog.id, {            ...correctDataCreateBlog,            websiteUrl: 'https://site.com.',        }, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet5 = await updateBlog(createdNewBlog.id, {            ...correctDataCreateBlog,            websiteUrl: 'https://site',        }, HTTP_STATUSES.BAD_REQUEST);        // @ts-ignore        const invalidDataSet6 = await updateBlog(createdNewBlog.id, {}, HTTP_STATUSES.BAD_REQUEST);        const invalidDataSet7 = await createNewBlog({            name: 't'.repeat(16),            description: 't'.repeat(501),            websiteUrl: 't'.repeat(101),        }, HTTP_STATUSES.BAD_REQUEST);        expect(invalidDataSet1.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet2.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet3.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet4.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet5.body.errorsMessages).toHaveLength(1);        expect(invalidDataSet6.body.errorsMessages).toHaveLength(3);        expect(invalidDataSet7.body.errorsMessages).toHaveLength(3);        const allBlogs = await getAllBlogs();        expect(allBlogs.body).toEqual([expectedResponseCreatedBlog]);    });});